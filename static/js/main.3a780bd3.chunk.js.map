{"version":3,"sources":["card/card-component.jsx","card-list/card-list-component.jsx","search-box/search-box-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACxB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,YCJbC,G,MAAW,SAACR,GAGvB,OAAQ,sBAAKC,UAAY,YAAjB,eAAgCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAChE,cAAC,EAAD,CAAwBA,QAASA,GAApBA,EAAQC,YCJZM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACAZ,UAAY,SACZa,KAAO,SACPF,YAAeA,EACfG,SAAYF,MC+BDG,G,wDAjCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAS,GACTS,YAAY,IAJF,E,qDAOd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAGzC,WAAU,IAAD,OACP,EAAiCE,KAAKR,MAA/BR,EAAP,EAAOA,SAAWS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACAW,YAAc,kBACdC,aAAgB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAE1D,cAAC,EAAD,CAAUvB,SAAYiB,W,GA1BZO,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3a780bd3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card-component.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className = 'card-container'>\r\n        <img alt = 'monster' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2 >{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n\r\n","import React from 'react';\r\nimport {Card} from '../card/card-component';\r\nimport './card-list-component.css';\r\n\r\nexport const CardList = (props) => {\r\n\r\n\r\n  return  <div className = 'card-list'>  {props.monsters.map(monster => (\r\n    <Card key = {monster.id}monster={monster}/>\r\n  ))}</div>\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport './search-box-styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n    <input\r\n    className = 'search'\r\n    type = 'search'\r\n    placeholder = {placeholder}\r\n    onChange = {handleChange}\r\n    />\r\n)\r\n\r\n","import React from 'react';\nimport {CardList} from './card-list/card-list-component';\nimport {SearchBox} from './search-box/search-box-component';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters:[],\n      searchField:'',\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  render() {\n    const {monsters , searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n        placeholder = 'search monsters'\n        handleChange = {e => this.setState({searchField: e.target.value}) }\n        />\n        <CardList monsters = {filteredMonsters}/>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}